from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import json
from start_bot import config, bot
from database.sqlite_db import get_user_ids, check_member


class AdminStatesGroup(StatesGroup):  # –ö–ª–∞—Å—Å, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    get_file_from_admin = State()
    get_file_name_from_admin = State()
    get_del_number_from_admin = State()
    pic_or_text = State()


async def create_command(message: types.Message):
    if message.from_user.id in config['ADMIN']:
        with open("json/file_ids.json", 'r', encoding='UTF-8') as files_json:
            files = json.loads(files_json.read()).keys()
        cons = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ–∞–π–ª—ã:\n"
        for counter, name in enumerate(files):
            cons += f"{counter + 1}. " + name + ".\n"
        await message.answer(cons)
        await message.answer("–ö–∏–¥–∞–π —Ñ–∞–π–ª —Å—é–¥–∞!")
        await AdminStatesGroup.get_file_from_admin.set()
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é üò°")


async def delete_command(message: types.Message):
    if message.from_user.id in config['ADMIN']:
        with open("json/file_ids.json", 'r', encoding='UTF-8') as files_json:
            files = json.loads(files_json.read()).keys()
        cons = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ–∞–π–ª—ã:\n"
        for counter, name in enumerate(files):
            cons += f"{counter + 1}. " + name + ".\n"
        await message.answer(cons)
        await message.answer("–ù–∞–ø–∏—à–∏ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.\n"
                             "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –Ω–∞–ø–∏—à–∏ /cancel")
        await AdminStatesGroup.get_del_number_from_admin.set()
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é üò°")


async def message_command(message: types.Message, state: FSMContext):
    if check_member(message.from_user.id)[0][0] == 1:
        mes = message.text[9:]
        if mes:
            await message.answer("–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π\n"
                                 "–û—Ç–ø—Ä–∞–≤—å '–ù–µ—Ç', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
            await AdminStatesGroup.pic_or_text.set()
            async with state.proxy() as data:
                data['mes'] = mes
        else:
            await message.answer("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫:\n/message text\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–ø—Ä–æ—à—É —É —Ç–µ–±—è, "
                                 "—Ö–æ—á–µ—à—å –ª–∏ —Ç—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ –Ω–µ—Ç")
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ")


async def pic_message(message: types.Message, state: FSMContext):
    photo = message.photo[0].file_id
    async with state.proxy() as data:
        user_ids = get_user_ids()
        for user_id in user_ids:
            await bot.send_photo(chat_id=user_id[0], photo=photo, caption=data['mes'])
    await state.finish()


async def text_message(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        async with state.proxy() as data:
            await bot.send_message(message.chat.id, text=data['mes'])
        await state.finish()
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π\n"
                             "–û—Ç–ø—Ä–∞–≤—å '–ù–µ—Ç', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
                             "–û—Ç–ø—Ä–∞–≤—å '/cancel', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–∞—Å—Å—ã–ª–∫–∏.")


async def get_file_from_admin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['document'] = message.document.file_id
    await message.answer(
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤.")
    await AdminStatesGroup.next()


async def gffa_exception(message: types.Message, state: FSMContext):
    await message.answer("–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ñ–∞–π–ª!\n"
                         "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏ /cancel")


async def get_file_name_from_admin(message: types.Message, state: FSMContext):
    if message.content_type == types.ContentType.TEXT:
        with open("json/file_ids.json", 'r', encoding='UTF-8') as files_json:
            files = json.loads(files_json.read())
        async with state.proxy() as data:
            files.update({message.text: data['document']})
        with open("json/file_ids.json", 'w', encoding='UTF-8') as files_json:
            json.dump(files, files_json, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))
        await message.answer(f"–£—Ä–∞! –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{message.text}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        await state.finish()
    else:
        await message.answer("–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞!\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –Ω–∞–ø–∏—à–∏ /cancel")


async def get_del_number_from_admin(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        num = int(message.text)
        with open("json/file_ids.json", 'r', encoding='UTF-8') as files_json:
            files = json.loads(files_json.read())
        if 0 < num <= len(files):
            name = list(files.keys())[num - 1]
            files.pop(name)
            with open("json/file_ids.json", 'w', encoding='UTF-8') as files_json:
                json.dump(files, files_json, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))
            await message.answer(f"–ö–æ–Ω—Å–ø–µ–∫—Ç '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
            await state.finish()
        else:
            await message.answer("–ö–æ–Ω—Å–ø–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ...\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    else:
        await message.answer("–¢—ã –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ!\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É \\cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


def register_handlers_admin(dispatcher: Dispatcher):
    dispatcher.register_message_handler(create_command, commands=['create'])
    dispatcher.register_message_handler(delete_command, commands=['delete'])
    dispatcher.register_message_handler(message_command, commands=['message'])
    dispatcher.register_message_handler(pic_message, content_types=['photo'],
                                        state=AdminStatesGroup.pic_or_text)
    dispatcher.register_message_handler(text_message,
                                        state=AdminStatesGroup.pic_or_text)
    dispatcher.register_message_handler(get_file_from_admin, content_types=['document'],
                                        state=AdminStatesGroup.get_file_from_admin)
    dispatcher.register_message_handler(gffa_exception, content_types=['text'],
                                        state=AdminStatesGroup.get_file_from_admin)
    dispatcher.register_message_handler(get_file_name_from_admin,
                                        state=AdminStatesGroup.get_file_name_from_admin)
    dispatcher.register_message_handler(get_del_number_from_admin, content_types=['text'],
                                        state=AdminStatesGroup.get_del_number_from_admin)
