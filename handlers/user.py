from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import json
import random
from start_bot import bot, config, history, digest
from database.sqlite_db import check_member, add_new_member


class UserStatesGroup(StatesGroup):
    get_name = State()
    get_file_number = State()
    get_test_number = State()
    get_test_answer = State()


async def start_command(message: types.Message):
    if status := check_member(message.from_user.id):
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        tests_key = KeyboardButton("–¢–µ—Å—Ç—ã")
        history_key = KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥—ã")
        notes_key = KeyboardButton("–ö–æ–Ω—Å–ø–µ–∫—Ç—ã")
        digest_key = KeyboardButton("–î–∞–π–¥–∂–µ—Å—Ç")
        kb.add(tests_key).insert(history_key).add(notes_key).insert(digest_key)
        if status[0]:
            await bot.send_message(chat_id=message.chat.id,
                                   text="–¢—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞!\n–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
                                        "/create - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ –±–æ—Ç–∞\n/delete - —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –±–æ—Ç–∞",
                                   reply_markup=kb)
        else:
            await bot.send_message(chat_id=message.chat.id,
                                   text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç...\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.",
                                   reply_markup=kb)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç... \n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, "
                             "—á—Ç–æ–±—ã —è –≤–Ω—ë—Å —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
        await UserStatesGroup.get_name.set()


async def unclear_command(message: types.Message):  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if message.text == "–¢–µ—Å—Ç—ã":
        with open("json/tests.json", 'r', encoding='UTF-8') as tests_json:
            tests = json.loads(tests_json.read()).keys()
        if tests:
            ans = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–µ—Å—Ç—ã:\n"
            for counter, test in enumerate(tests):
                ans += f"{counter + 1}. " + test + ".\n"
            ans += "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞.\n" \
                   "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /cancel"
            await UserStatesGroup.get_test_number.set()
            await message.answer(text=ans)
        else:
            await message.answer("–¢–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç ü•∫")
    elif message.text == "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥—ã":
        await message.answer(text=history)
    elif message.text == "–ö–æ–Ω—Å–ø–µ–∫—Ç—ã":
        with open("json/file_ids.json", 'r', encoding='UTF-8') as files_json:
            files = json.loads(files_json.read()).keys()
        if files:
            cons = "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:\n"
            for counter, name in enumerate(files):
                cons += f"{counter + 1}. " + name + ".\n"
            cons += "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç, –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ—Ä—è–¥–∫—É –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ üòÅ"
            await UserStatesGroup.get_file_number.set()
            await message.answer(text=cons)
        else:
            await message.answer(text="–ö–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç ü•∫")
    elif message.text == "–î–∞–π–¥–∂–µ—Å—Ç":
        await message.answer(text=digest)
    else:
        await message.answer(text="–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ü•∫")


async def cancel_command(message: types.Message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ!")


async def get_name(message: types.Message, state: FSMContext):
    add_new_member([message.from_user.id, message.text])
    await state.finish()


async def get_file_number(message: types.Message, state: FSMContext):  # –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text.isdigit():
        num = int(message.text)
        with open("json/file_ids.json", 'r', encoding='UTF-8') as files_json:
            file_ids = [*json.loads(files_json.read()).values()]
        if 0 < num <= len(file_ids):
            await bot.send_document(chat_id=message.chat.id, document=file_ids[num - 1])
            await state.finish()
        else:
            await message.answer("–ö–æ–Ω—Å–ø–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ...\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    else:
        await message.answer("–¢—ã –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ!\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


async def get_test_number(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        num = int(message.text)
        with open("json/tests.json", 'r', encoding='UTF-8') as tests_json:
            tests = [*json.loads(tests_json.read()).values()]
        if 0 < num <= len(tests):
            async with state.proxy() as data:
                data['test'] = tests[num - 1]
                data['question'] = 0
                data['answer'] = ""
            await message.answer("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–µ—Å—Ç. –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞:\n1. –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã "
                                 "–æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞.\n2. –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, "
                                 "–Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–æ–≤–æ–º (—Å–ª–æ–≤–∞–º–∏).")
            await UserStatesGroup.next()
            await get_test_answer(message, state)
        else:
            await message.answer("–¢–µ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ...\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    else:
        await message.answer("–¢—ã –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ!\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


async def get_test_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data['question'] != 0:
            if message.text == data['correct']:
                data['answer'] += '+'
            else:
                data['answer'] += '-'
            if data['question'] == len(data['test']):
                await message.answer(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {data['answer']}")
                await state.finish()
                await bot.send_message(config['ADMIN'][0], f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç "
                                                           f"—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ {data['answer']}")
                return
        question = list(data['test'].keys())[data['question']]
        options = data['test'][question]
        if type(options) == list:
            data['correct'] = options[0]
            random.shuffle(options)
            data['correct'] = str(options.index(data['correct']) + 1)
            for counter, option in enumerate(options):
                question += f"\n{counter + 1}. {option}"
        else:
            data['correct'] = options
        data['question'] += 1
    await message.answer(question)


def register_handlers_user(dispatcher: Dispatcher):
    dispatcher.register_message_handler(start_command, commands=['start'])
    dispatcher.register_message_handler(unclear_command)
    dispatcher.register_message_handler(cancel_command, commands=['cancel'], state='*')
    dispatcher.register_message_handler(get_name, state=UserStatesGroup.get_name)
    dispatcher.register_message_handler(get_file_number, state=UserStatesGroup.get_file_number)
    dispatcher.register_message_handler(get_test_number, state=UserStatesGroup.get_test_number)
    dispatcher.register_message_handler(get_test_answer, state=UserStatesGroup.get_test_answer)
